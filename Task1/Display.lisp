(defun displayBoard ()
    (format t "~%")
    (createTopRow)
    (createFields)
    (format t "~%")
)

(defun createTopRow ()
    (format t "~%     1")
    (dotimes (topNumber dimension)
        (if (not (= (1+ topNumber) 1)) (format t "      ~a"(1+ topNumber)))
    )
    (format t "~%")
)

(defun createFields ()
    (dotimes (i dimension)
        (dotimes (j 3)
            (if (= j 1)
                (format t "~a " (cadr (assoc i numberToLetter)))
                (format t "  ")
            )
            (dotimes (k dimension)
                (if (= (mod (+ i k) 2) 0) 
                    (displayBits i j k globalMatrix)
                    (emptyField))
                (if (= k (- dimension 1)) (format t "~%"))
            )
        )
    )
)

(defun displayBits (i j k lista)
        (cond 
            ((null (getBitsByKey (list i k) lista)) (getDots 3))
            ((= 2 j) (getThirdRowBits (getBitsByKey (list i k) lista)))
            ((= j 1) (getSecondRowBits (getBitsByKey (list i k) lista)))
            ((and (= j 0) (< (length (getBitsByKey (list i k) lista)) 7)) (getDots 3))
            ((and (= j 0) (= (length (getBitsByKey (list i k) lista)) 7)) (progn (getDots 2) (format t "~a " (car (getBitsByKey (list i k) lista)))))
        )
)

(defun getFirstThree (bits)
    (reverse (list (car (reverse bits)) (cadr (reverse bits)) (caddr (reverse bits))))
)

(defun getThirdRowBits (bits)
        (cond 
            ((= (length bits) 1) (format t " . . ~a " (car bits)))
            ((= (length bits) 2) (format t " . ~a ~a " (car bits) (cadr bits)))
            ((= (length bits) 3) (format t " ~a ~a ~a " (car bits) (cadr bits) (caddr bits)))
            ((>= (length bits) 4)  (let ((firstThree (getFirstThree bits))) (format t " ~a ~a ~a " (car firstThree) (cadr firstThree) (caddr firstThree))))
        )
)

(defun getSecondRowBits (bits)
    (cond
        ((< (length bits) 4) (getDots 3))
        ((= (length bits) 4) (format t " . . ~a " (car bits)))
        ((= (length bits) 5) (format t " . ~a ~a " (car bits) (cadr bits)))
        ((= (length bits) 6) (format t " ~a ~a ~a " (car bits) (cadr bits) (caddr bits)))
        ((= (length bits) 7) (format t " ~a ~a ~a " (car (cdr bits)) (cadr (cdr bits)) (caddr (cdr bits))))
    )
)

(defun getBitsByKey(key lista)
    (if (null lista) '()
        (if (equalp (caar lista) key) (cadar lista)
            (getBitsByKey key (cdr lista))
        )
    )
)

(defun enterMovePrint ()
    (format t "Enter your move as a list~%")
    (if isX 
        (format t "Player X has turn:")
        (format t "Player O has turn:")
    )
    ;(setq isX (not isX)) ;ovo bi trebalo da se prebaci posle validacije jer ako potez nije validan promenice igraca a da prethodni nije jos odigrao
)


(defun getDots(numberOfDots)
    (cond 
        ((= 3 numberOfDots) (format t " . . . "))
        ((= 2 numberOfDots) (format t " . . "))
        ((= 1 numberOfDots) (format t " . "))
        ((= 0 numberOfDots) (format t " " ))
    )
)

(defun emptyField()
    (format t "       ")
)