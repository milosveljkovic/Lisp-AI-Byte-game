(defun startGame ()
    (welcome)
    (readBoardDimension)
    (matrixFactoryByte 1 2)
    (displayBoard)
)

(defun welcome ()
    (format t "~%. . . . . . . . . . . . . . . . . . . . . . .")
    (format t "~%. . . . . .     Welcome to BYTE   . . . . . .")
    (format t "~%. . . . . . . . . . . . . . . . . . . . . . .~%")
)

(defun readBoardDimension () 
    (format t "~%. . . . . . . . . . . . . . . . . . . . . . .")
    (format t "~%Enter board dimension: ")
    (setq dimension (read))
    (format t ". . . . . . . . . . . . . . . . . . . . . . .")
)

(defun createTopRow ()
    (format t "~%     1")
    (dotimes (topNumber dimension)
        (if (not (= (1+ topNumber) 1)) (format t "      ~a"(1+ topNumber)))
    )
    (format t "~%")
)

(defun matrixFactoryByte (row column)
    (cond ((= dimension row) '())
        ((and (= 0 (mod row 2)) (< column (+ 1 dimension))) (cons (cons (list row column) (list '(O)) ) (matrixFactoryByte row (+ 2 column)) ) )
        ((= (+ 1 dimension) column) (matrixFactoryByte (1+ row) '2 ) )
        ( (and (= 1 (mod row 2)) (< column (+ 2 dimension)) ) (cons (cons (list row column) (list '(X))) (matrixFactoryByte row (+ 2 column))  ) )
        ((= (+ 2 dimension) column) (matrixFactoryByte (1+ row) '1))
    )
)

(defun list-key-assoc(key lista )
    (if (null lista) '()
        (if (equalp (caar lista) key) (cadar lista)
            (list-key-assoc key (cdr lista))
        )
    )
)

(defun emptyField()
    (format t "       ")
)

(defun getDots(numberOfDots)
    (cond ((= 3 numberOfDots) (format t " . . . "))
        ((= 2 numberOfDots) (format t " . . "))
        ((= 1 numberOfDots) (format t " . "))
        ((= 0 numberOfDots) (format t " " ))
    )
)

(setq numberToLetter '((0 A) (1 B) (2 C) (3 D) (4 E) (5 F) (6 G) (7 H) (8 I) (9 J)))


(defun displayBoard ()
    (format t "~%")
    (createTopRow)
    (createFields)
    (format t "~%")
)

(defun createFields ()
    (dotimes (i dimension)
    (dotimes (j 3)
            (if (= j 1) 
                (format t "~a " (cadr (assoc i numberToLetter)))
                (format t "  ")
            )
        (dotimes (k dimension)
            (if (= (mod (+ i k) 2) 0) 

                (getDots 3) 
                (emptyField))
            (if (= k (- dimension 1)) (format t "~%"))
        )
    )
)
)

(startGame)
;; (dotimes (n 10)
;;   (print n))